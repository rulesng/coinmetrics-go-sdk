// Code generated by MockGen. DO NOT EDIT.
// Source: ./api/v4/v4.go

// Package mock_v4 is a generated GoMock package.
package mock_v4

import (
	context "context"
	http "net/http"
	reflect "reflect"

	v4 "github.com/Improwised/coinmetrics-go-sdk/api/v4"
	gomock "github.com/golang/mock/gomock"
)

// MockHttpRequestDoer is a mock of HttpRequestDoer interface.
type MockHttpRequestDoer struct {
	ctrl     *gomock.Controller
	recorder *MockHttpRequestDoerMockRecorder
}

// MockHttpRequestDoerMockRecorder is the mock recorder for MockHttpRequestDoer.
type MockHttpRequestDoerMockRecorder struct {
	mock *MockHttpRequestDoer
}

// NewMockHttpRequestDoer creates a new mock instance.
func NewMockHttpRequestDoer(ctrl *gomock.Controller) *MockHttpRequestDoer {
	mock := &MockHttpRequestDoer{ctrl: ctrl}
	mock.recorder = &MockHttpRequestDoerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHttpRequestDoer) EXPECT() *MockHttpRequestDoerMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockHttpRequestDoer) Do(req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockHttpRequestDoerMockRecorder) Do(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockHttpRequestDoer)(nil).Do), req)
}

// MockClientInterface is a mock of ClientInterface interface.
type MockClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientInterfaceMockRecorder
}

// MockClientInterfaceMockRecorder is the mock recorder for MockClientInterface.
type MockClientInterfaceMockRecorder struct {
	mock *MockClientInterface
}

// NewMockClientInterface creates a new mock instance.
func NewMockClientInterface(ctrl *gomock.Controller) *MockClientInterface {
	mock := &MockClientInterface{ctrl: ctrl}
	mock.recorder = &MockClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientInterface) EXPECT() *MockClientInterfaceMockRecorder {
	return m.recorder
}

// GetAssetAlerts mocks base method.
func (m *MockClientInterface) GetAssetAlerts(ctx context.Context, params *v4.GetAssetAlertsParams, reqEditors ...v4.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAssetAlerts", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssetAlerts indicates an expected call of GetAssetAlerts.
func (mr *MockClientInterfaceMockRecorder) GetAssetAlerts(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssetAlerts", reflect.TypeOf((*MockClientInterface)(nil).GetAssetAlerts), varargs...)
}

// GetAssetChains mocks base method.
func (m *MockClientInterface) GetAssetChains(ctx context.Context, params *v4.GetAssetChainsParams, reqEditors ...v4.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAssetChains", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssetChains indicates an expected call of GetAssetChains.
func (mr *MockClientInterfaceMockRecorder) GetAssetChains(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssetChains", reflect.TypeOf((*MockClientInterface)(nil).GetAssetChains), varargs...)
}

// GetBlockchainFullBlock mocks base method.
func (m *MockClientInterface) GetBlockchainFullBlock(ctx context.Context, asset v4.BlockchainAsset, blockHash v4.BlockchainBlockHash, params *v4.GetBlockchainFullBlockParams, reqEditors ...v4.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, asset, blockHash, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlockchainFullBlock", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockchainFullBlock indicates an expected call of GetBlockchainFullBlock.
func (mr *MockClientInterfaceMockRecorder) GetBlockchainFullBlock(ctx, asset, blockHash, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, asset, blockHash, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockchainFullBlock", reflect.TypeOf((*MockClientInterface)(nil).GetBlockchainFullBlock), varargs...)
}

// GetBlockchainFullTransaction mocks base method.
func (m *MockClientInterface) GetBlockchainFullTransaction(ctx context.Context, asset v4.BlockchainAsset, transactionHash v4.BlockchainTransactionHash, params *v4.GetBlockchainFullTransactionParams, reqEditors ...v4.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, asset, transactionHash, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlockchainFullTransaction", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockchainFullTransaction indicates an expected call of GetBlockchainFullTransaction.
func (mr *MockClientInterfaceMockRecorder) GetBlockchainFullTransaction(ctx, asset, transactionHash, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, asset, transactionHash, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockchainFullTransaction", reflect.TypeOf((*MockClientInterface)(nil).GetBlockchainFullTransaction), varargs...)
}

// GetBlockchainFullTransactionForBlock mocks base method.
func (m *MockClientInterface) GetBlockchainFullTransactionForBlock(ctx context.Context, asset v4.BlockchainAsset, blockHash v4.BlockchainBlockHash, transactionHash v4.BlockchainTransactionHash, params *v4.GetBlockchainFullTransactionForBlockParams, reqEditors ...v4.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, asset, blockHash, transactionHash, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlockchainFullTransactionForBlock", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockchainFullTransactionForBlock indicates an expected call of GetBlockchainFullTransactionForBlock.
func (mr *MockClientInterfaceMockRecorder) GetBlockchainFullTransactionForBlock(ctx, asset, blockHash, transactionHash, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, asset, blockHash, transactionHash, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockchainFullTransactionForBlock", reflect.TypeOf((*MockClientInterface)(nil).GetBlockchainFullTransactionForBlock), varargs...)
}

// GetBlockchainListOfAccounts mocks base method.
func (m *MockClientInterface) GetBlockchainListOfAccounts(ctx context.Context, asset v4.BlockchainAsset, params *v4.GetBlockchainListOfAccountsParams, reqEditors ...v4.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, asset, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlockchainListOfAccounts", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockchainListOfAccounts indicates an expected call of GetBlockchainListOfAccounts.
func (mr *MockClientInterfaceMockRecorder) GetBlockchainListOfAccounts(ctx, asset, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, asset, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockchainListOfAccounts", reflect.TypeOf((*MockClientInterface)(nil).GetBlockchainListOfAccounts), varargs...)
}

// GetBlockchainListOfBalanceUpdates mocks base method.
func (m *MockClientInterface) GetBlockchainListOfBalanceUpdates(ctx context.Context, asset v4.BlockchainAsset, params *v4.GetBlockchainListOfBalanceUpdatesParams, reqEditors ...v4.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, asset, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlockchainListOfBalanceUpdates", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockchainListOfBalanceUpdates indicates an expected call of GetBlockchainListOfBalanceUpdates.
func (mr *MockClientInterfaceMockRecorder) GetBlockchainListOfBalanceUpdates(ctx, asset, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, asset, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockchainListOfBalanceUpdates", reflect.TypeOf((*MockClientInterface)(nil).GetBlockchainListOfBalanceUpdates), varargs...)
}

// GetBlockchainListOfBlocks mocks base method.
func (m *MockClientInterface) GetBlockchainListOfBlocks(ctx context.Context, asset v4.BlockchainAsset, params *v4.GetBlockchainListOfBlocksParams, reqEditors ...v4.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, asset, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlockchainListOfBlocks", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockchainListOfBlocks indicates an expected call of GetBlockchainListOfBlocks.
func (mr *MockClientInterfaceMockRecorder) GetBlockchainListOfBlocks(ctx, asset, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, asset, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockchainListOfBlocks", reflect.TypeOf((*MockClientInterface)(nil).GetBlockchainListOfBlocks), varargs...)
}

// GetBlockchainListOfTransactions mocks base method.
func (m *MockClientInterface) GetBlockchainListOfTransactions(ctx context.Context, asset v4.BlockchainAsset, params *v4.GetBlockchainListOfTransactionsParams, reqEditors ...v4.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, asset, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlockchainListOfTransactions", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockchainListOfTransactions indicates an expected call of GetBlockchainListOfTransactions.
func (mr *MockClientInterfaceMockRecorder) GetBlockchainListOfTransactions(ctx, asset, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, asset, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockchainListOfTransactions", reflect.TypeOf((*MockClientInterface)(nil).GetBlockchainListOfTransactions), varargs...)
}

// GetBlockchainV2FullBlock mocks base method.
func (m *MockClientInterface) GetBlockchainV2FullBlock(ctx context.Context, asset v4.BlockchainAsset, blockHash v4.BlockchainBlockHash, params *v4.GetBlockchainV2FullBlockParams, reqEditors ...v4.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, asset, blockHash, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlockchainV2FullBlock", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockchainV2FullBlock indicates an expected call of GetBlockchainV2FullBlock.
func (mr *MockClientInterfaceMockRecorder) GetBlockchainV2FullBlock(ctx, asset, blockHash, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, asset, blockHash, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockchainV2FullBlock", reflect.TypeOf((*MockClientInterface)(nil).GetBlockchainV2FullBlock), varargs...)
}

// GetBlockchainV2FullTransaction mocks base method.
func (m *MockClientInterface) GetBlockchainV2FullTransaction(ctx context.Context, asset v4.BlockchainAsset, txid v4.BlockchainTransactionId, params *v4.GetBlockchainV2FullTransactionParams, reqEditors ...v4.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, asset, txid, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlockchainV2FullTransaction", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockchainV2FullTransaction indicates an expected call of GetBlockchainV2FullTransaction.
func (mr *MockClientInterfaceMockRecorder) GetBlockchainV2FullTransaction(ctx, asset, txid, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, asset, txid, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockchainV2FullTransaction", reflect.TypeOf((*MockClientInterface)(nil).GetBlockchainV2FullTransaction), varargs...)
}

// GetBlockchainV2FullTransactionForBlock mocks base method.
func (m *MockClientInterface) GetBlockchainV2FullTransactionForBlock(ctx context.Context, asset v4.BlockchainAsset, blockHash v4.BlockchainBlockHash, txid v4.BlockchainTransactionId, params *v4.GetBlockchainV2FullTransactionForBlockParams, reqEditors ...v4.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, asset, blockHash, txid, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlockchainV2FullTransactionForBlock", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockchainV2FullTransactionForBlock indicates an expected call of GetBlockchainV2FullTransactionForBlock.
func (mr *MockClientInterfaceMockRecorder) GetBlockchainV2FullTransactionForBlock(ctx, asset, blockHash, txid, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, asset, blockHash, txid, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockchainV2FullTransactionForBlock", reflect.TypeOf((*MockClientInterface)(nil).GetBlockchainV2FullTransactionForBlock), varargs...)
}

// GetBlockchainV2ListOfAccounts mocks base method.
func (m *MockClientInterface) GetBlockchainV2ListOfAccounts(ctx context.Context, asset v4.BlockchainAsset, params *v4.GetBlockchainV2ListOfAccountsParams, reqEditors ...v4.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, asset, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlockchainV2ListOfAccounts", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockchainV2ListOfAccounts indicates an expected call of GetBlockchainV2ListOfAccounts.
func (mr *MockClientInterfaceMockRecorder) GetBlockchainV2ListOfAccounts(ctx, asset, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, asset, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockchainV2ListOfAccounts", reflect.TypeOf((*MockClientInterface)(nil).GetBlockchainV2ListOfAccounts), varargs...)
}

// GetBlockchainV2ListOfBalanceUpdates mocks base method.
func (m *MockClientInterface) GetBlockchainV2ListOfBalanceUpdates(ctx context.Context, asset v4.BlockchainAsset, params *v4.GetBlockchainV2ListOfBalanceUpdatesParams, reqEditors ...v4.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, asset, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlockchainV2ListOfBalanceUpdates", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockchainV2ListOfBalanceUpdates indicates an expected call of GetBlockchainV2ListOfBalanceUpdates.
func (mr *MockClientInterfaceMockRecorder) GetBlockchainV2ListOfBalanceUpdates(ctx, asset, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, asset, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockchainV2ListOfBalanceUpdates", reflect.TypeOf((*MockClientInterface)(nil).GetBlockchainV2ListOfBalanceUpdates), varargs...)
}

// GetBlockchainV2ListOfBlocks mocks base method.
func (m *MockClientInterface) GetBlockchainV2ListOfBlocks(ctx context.Context, asset v4.BlockchainAsset, params *v4.GetBlockchainV2ListOfBlocksParams, reqEditors ...v4.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, asset, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlockchainV2ListOfBlocks", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockchainV2ListOfBlocks indicates an expected call of GetBlockchainV2ListOfBlocks.
func (mr *MockClientInterfaceMockRecorder) GetBlockchainV2ListOfBlocks(ctx, asset, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, asset, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockchainV2ListOfBlocks", reflect.TypeOf((*MockClientInterface)(nil).GetBlockchainV2ListOfBlocks), varargs...)
}

// GetBlockchainV2ListOfSubAccounts mocks base method.
func (m *MockClientInterface) GetBlockchainV2ListOfSubAccounts(ctx context.Context, asset v4.BlockchainAsset, params *v4.GetBlockchainV2ListOfSubAccountsParams, reqEditors ...v4.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, asset, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlockchainV2ListOfSubAccounts", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockchainV2ListOfSubAccounts indicates an expected call of GetBlockchainV2ListOfSubAccounts.
func (mr *MockClientInterfaceMockRecorder) GetBlockchainV2ListOfSubAccounts(ctx, asset, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, asset, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockchainV2ListOfSubAccounts", reflect.TypeOf((*MockClientInterface)(nil).GetBlockchainV2ListOfSubAccounts), varargs...)
}

// GetBlockchainV2ListOfTransactions mocks base method.
func (m *MockClientInterface) GetBlockchainV2ListOfTransactions(ctx context.Context, asset v4.BlockchainAsset, params *v4.GetBlockchainV2ListOfTransactionsParams, reqEditors ...v4.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, asset, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlockchainV2ListOfTransactions", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockchainV2ListOfTransactions indicates an expected call of GetBlockchainV2ListOfTransactions.
func (mr *MockClientInterfaceMockRecorder) GetBlockchainV2ListOfTransactions(ctx, asset, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, asset, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockchainV2ListOfTransactions", reflect.TypeOf((*MockClientInterface)(nil).GetBlockchainV2ListOfTransactions), varargs...)
}

// GetCatalogAllAssetAlertRules mocks base method.
func (m *MockClientInterface) GetCatalogAllAssetAlertRules(ctx context.Context, params *v4.GetCatalogAllAssetAlertRulesParams, reqEditors ...v4.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCatalogAllAssetAlertRules", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCatalogAllAssetAlertRules indicates an expected call of GetCatalogAllAssetAlertRules.
func (mr *MockClientInterfaceMockRecorder) GetCatalogAllAssetAlertRules(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCatalogAllAssetAlertRules", reflect.TypeOf((*MockClientInterface)(nil).GetCatalogAllAssetAlertRules), varargs...)
}

// GetCatalogAllAssetPairs mocks base method.
func (m *MockClientInterface) GetCatalogAllAssetPairs(ctx context.Context, params *v4.GetCatalogAllAssetPairsParams, reqEditors ...v4.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCatalogAllAssetPairs", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCatalogAllAssetPairs indicates an expected call of GetCatalogAllAssetPairs.
func (mr *MockClientInterfaceMockRecorder) GetCatalogAllAssetPairs(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCatalogAllAssetPairs", reflect.TypeOf((*MockClientInterface)(nil).GetCatalogAllAssetPairs), varargs...)
}

// GetCatalogAllAssets mocks base method.
func (m *MockClientInterface) GetCatalogAllAssets(ctx context.Context, params *v4.GetCatalogAllAssetsParams, reqEditors ...v4.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCatalogAllAssets", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCatalogAllAssets indicates an expected call of GetCatalogAllAssets.
func (mr *MockClientInterfaceMockRecorder) GetCatalogAllAssets(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCatalogAllAssets", reflect.TypeOf((*MockClientInterface)(nil).GetCatalogAllAssets), varargs...)
}

// GetCatalogAllExchangeAssets mocks base method.
func (m *MockClientInterface) GetCatalogAllExchangeAssets(ctx context.Context, params *v4.GetCatalogAllExchangeAssetsParams, reqEditors ...v4.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCatalogAllExchangeAssets", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCatalogAllExchangeAssets indicates an expected call of GetCatalogAllExchangeAssets.
func (mr *MockClientInterfaceMockRecorder) GetCatalogAllExchangeAssets(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCatalogAllExchangeAssets", reflect.TypeOf((*MockClientInterface)(nil).GetCatalogAllExchangeAssets), varargs...)
}

// GetCatalogAllExchanges mocks base method.
func (m *MockClientInterface) GetCatalogAllExchanges(ctx context.Context, params *v4.GetCatalogAllExchangesParams, reqEditors ...v4.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCatalogAllExchanges", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCatalogAllExchanges indicates an expected call of GetCatalogAllExchanges.
func (mr *MockClientInterfaceMockRecorder) GetCatalogAllExchanges(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCatalogAllExchanges", reflect.TypeOf((*MockClientInterface)(nil).GetCatalogAllExchanges), varargs...)
}

// GetCatalogAllIndexes mocks base method.
func (m *MockClientInterface) GetCatalogAllIndexes(ctx context.Context, params *v4.GetCatalogAllIndexesParams, reqEditors ...v4.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCatalogAllIndexes", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCatalogAllIndexes indicates an expected call of GetCatalogAllIndexes.
func (mr *MockClientInterfaceMockRecorder) GetCatalogAllIndexes(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCatalogAllIndexes", reflect.TypeOf((*MockClientInterface)(nil).GetCatalogAllIndexes), varargs...)
}

// GetCatalogAllInstitutions mocks base method.
func (m *MockClientInterface) GetCatalogAllInstitutions(ctx context.Context, params *v4.GetCatalogAllInstitutionsParams, reqEditors ...v4.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCatalogAllInstitutions", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCatalogAllInstitutions indicates an expected call of GetCatalogAllInstitutions.
func (mr *MockClientInterfaceMockRecorder) GetCatalogAllInstitutions(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCatalogAllInstitutions", reflect.TypeOf((*MockClientInterface)(nil).GetCatalogAllInstitutions), varargs...)
}

// GetCatalogAllMarketCandles mocks base method.
func (m *MockClientInterface) GetCatalogAllMarketCandles(ctx context.Context, params *v4.GetCatalogAllMarketCandlesParams, reqEditors ...v4.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCatalogAllMarketCandles", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCatalogAllMarketCandles indicates an expected call of GetCatalogAllMarketCandles.
func (mr *MockClientInterfaceMockRecorder) GetCatalogAllMarketCandles(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCatalogAllMarketCandles", reflect.TypeOf((*MockClientInterface)(nil).GetCatalogAllMarketCandles), varargs...)
}

// GetCatalogAllMarketMetrics mocks base method.
func (m *MockClientInterface) GetCatalogAllMarketMetrics(ctx context.Context, params *v4.GetCatalogAllMarketMetricsParams, reqEditors ...v4.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCatalogAllMarketMetrics", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCatalogAllMarketMetrics indicates an expected call of GetCatalogAllMarketMetrics.
func (mr *MockClientInterfaceMockRecorder) GetCatalogAllMarketMetrics(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCatalogAllMarketMetrics", reflect.TypeOf((*MockClientInterface)(nil).GetCatalogAllMarketMetrics), varargs...)
}

// GetCatalogAllMarkets mocks base method.
func (m *MockClientInterface) GetCatalogAllMarkets(ctx context.Context, params *v4.GetCatalogAllMarketsParams, reqEditors ...v4.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCatalogAllMarkets", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCatalogAllMarkets indicates an expected call of GetCatalogAllMarkets.
func (mr *MockClientInterfaceMockRecorder) GetCatalogAllMarkets(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCatalogAllMarkets", reflect.TypeOf((*MockClientInterface)(nil).GetCatalogAllMarkets), varargs...)
}

// GetCatalogAllMetrics mocks base method.
func (m *MockClientInterface) GetCatalogAllMetrics(ctx context.Context, params *v4.GetCatalogAllMetricsParams, reqEditors ...v4.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCatalogAllMetrics", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCatalogAllMetrics indicates an expected call of GetCatalogAllMetrics.
func (mr *MockClientInterfaceMockRecorder) GetCatalogAllMetrics(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCatalogAllMetrics", reflect.TypeOf((*MockClientInterface)(nil).GetCatalogAllMetrics), varargs...)
}

// GetCatalogAssetAlertRules mocks base method.
func (m *MockClientInterface) GetCatalogAssetAlertRules(ctx context.Context, params *v4.GetCatalogAssetAlertRulesParams, reqEditors ...v4.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCatalogAssetAlertRules", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCatalogAssetAlertRules indicates an expected call of GetCatalogAssetAlertRules.
func (mr *MockClientInterfaceMockRecorder) GetCatalogAssetAlertRules(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCatalogAssetAlertRules", reflect.TypeOf((*MockClientInterface)(nil).GetCatalogAssetAlertRules), varargs...)
}

// GetCatalogAssetPairs mocks base method.
func (m *MockClientInterface) GetCatalogAssetPairs(ctx context.Context, params *v4.GetCatalogAssetPairsParams, reqEditors ...v4.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCatalogAssetPairs", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCatalogAssetPairs indicates an expected call of GetCatalogAssetPairs.
func (mr *MockClientInterfaceMockRecorder) GetCatalogAssetPairs(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCatalogAssetPairs", reflect.TypeOf((*MockClientInterface)(nil).GetCatalogAssetPairs), varargs...)
}

// GetCatalogAssets mocks base method.
func (m *MockClientInterface) GetCatalogAssets(ctx context.Context, params *v4.GetCatalogAssetsParams, reqEditors ...v4.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCatalogAssets", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCatalogAssets indicates an expected call of GetCatalogAssets.
func (mr *MockClientInterfaceMockRecorder) GetCatalogAssets(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCatalogAssets", reflect.TypeOf((*MockClientInterface)(nil).GetCatalogAssets), varargs...)
}

// GetCatalogExchangeAssets mocks base method.
func (m *MockClientInterface) GetCatalogExchangeAssets(ctx context.Context, params *v4.GetCatalogExchangeAssetsParams, reqEditors ...v4.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCatalogExchangeAssets", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCatalogExchangeAssets indicates an expected call of GetCatalogExchangeAssets.
func (mr *MockClientInterfaceMockRecorder) GetCatalogExchangeAssets(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCatalogExchangeAssets", reflect.TypeOf((*MockClientInterface)(nil).GetCatalogExchangeAssets), varargs...)
}

// GetCatalogExchanges mocks base method.
func (m *MockClientInterface) GetCatalogExchanges(ctx context.Context, params *v4.GetCatalogExchangesParams, reqEditors ...v4.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCatalogExchanges", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCatalogExchanges indicates an expected call of GetCatalogExchanges.
func (mr *MockClientInterfaceMockRecorder) GetCatalogExchanges(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCatalogExchanges", reflect.TypeOf((*MockClientInterface)(nil).GetCatalogExchanges), varargs...)
}

// GetCatalogIndexes mocks base method.
func (m *MockClientInterface) GetCatalogIndexes(ctx context.Context, params *v4.GetCatalogIndexesParams, reqEditors ...v4.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCatalogIndexes", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCatalogIndexes indicates an expected call of GetCatalogIndexes.
func (mr *MockClientInterfaceMockRecorder) GetCatalogIndexes(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCatalogIndexes", reflect.TypeOf((*MockClientInterface)(nil).GetCatalogIndexes), varargs...)
}

// GetCatalogInstitutions mocks base method.
func (m *MockClientInterface) GetCatalogInstitutions(ctx context.Context, params *v4.GetCatalogInstitutionsParams, reqEditors ...v4.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCatalogInstitutions", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCatalogInstitutions indicates an expected call of GetCatalogInstitutions.
func (mr *MockClientInterfaceMockRecorder) GetCatalogInstitutions(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCatalogInstitutions", reflect.TypeOf((*MockClientInterface)(nil).GetCatalogInstitutions), varargs...)
}

// GetCatalogMarketCandles mocks base method.
func (m *MockClientInterface) GetCatalogMarketCandles(ctx context.Context, params *v4.GetCatalogMarketCandlesParams, reqEditors ...v4.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCatalogMarketCandles", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCatalogMarketCandles indicates an expected call of GetCatalogMarketCandles.
func (mr *MockClientInterfaceMockRecorder) GetCatalogMarketCandles(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCatalogMarketCandles", reflect.TypeOf((*MockClientInterface)(nil).GetCatalogMarketCandles), varargs...)
}

// GetCatalogMarketMetrics mocks base method.
func (m *MockClientInterface) GetCatalogMarketMetrics(ctx context.Context, params *v4.GetCatalogMarketMetricsParams, reqEditors ...v4.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCatalogMarketMetrics", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCatalogMarketMetrics indicates an expected call of GetCatalogMarketMetrics.
func (mr *MockClientInterfaceMockRecorder) GetCatalogMarketMetrics(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCatalogMarketMetrics", reflect.TypeOf((*MockClientInterface)(nil).GetCatalogMarketMetrics), varargs...)
}

// GetCatalogMarkets mocks base method.
func (m *MockClientInterface) GetCatalogMarkets(ctx context.Context, params *v4.GetCatalogMarketsParams, reqEditors ...v4.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCatalogMarkets", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCatalogMarkets indicates an expected call of GetCatalogMarkets.
func (mr *MockClientInterfaceMockRecorder) GetCatalogMarkets(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCatalogMarkets", reflect.TypeOf((*MockClientInterface)(nil).GetCatalogMarkets), varargs...)
}

// GetCatalogMetrics mocks base method.
func (m *MockClientInterface) GetCatalogMetrics(ctx context.Context, params *v4.GetCatalogMetricsParams, reqEditors ...v4.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCatalogMetrics", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCatalogMetrics indicates an expected call of GetCatalogMetrics.
func (mr *MockClientInterfaceMockRecorder) GetCatalogMetrics(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCatalogMetrics", reflect.TypeOf((*MockClientInterface)(nil).GetCatalogMetrics), varargs...)
}

// GetMempoolFeerates mocks base method.
func (m *MockClientInterface) GetMempoolFeerates(ctx context.Context, params *v4.GetMempoolFeeratesParams, reqEditors ...v4.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMempoolFeerates", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMempoolFeerates indicates an expected call of GetMempoolFeerates.
func (mr *MockClientInterfaceMockRecorder) GetMempoolFeerates(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMempoolFeerates", reflect.TypeOf((*MockClientInterface)(nil).GetMempoolFeerates), varargs...)
}

// GetTimeseriesAssetMetrics mocks base method.
func (m *MockClientInterface) GetTimeseriesAssetMetrics(ctx context.Context, params *v4.GetTimeseriesAssetMetricsParams, reqEditors ...v4.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTimeseriesAssetMetrics", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimeseriesAssetMetrics indicates an expected call of GetTimeseriesAssetMetrics.
func (mr *MockClientInterfaceMockRecorder) GetTimeseriesAssetMetrics(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeseriesAssetMetrics", reflect.TypeOf((*MockClientInterface)(nil).GetTimeseriesAssetMetrics), varargs...)
}

// GetTimeseriesExchangeAssetMetrics mocks base method.
func (m *MockClientInterface) GetTimeseriesExchangeAssetMetrics(ctx context.Context, params *v4.GetTimeseriesExchangeAssetMetricsParams, reqEditors ...v4.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTimeseriesExchangeAssetMetrics", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimeseriesExchangeAssetMetrics indicates an expected call of GetTimeseriesExchangeAssetMetrics.
func (mr *MockClientInterfaceMockRecorder) GetTimeseriesExchangeAssetMetrics(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeseriesExchangeAssetMetrics", reflect.TypeOf((*MockClientInterface)(nil).GetTimeseriesExchangeAssetMetrics), varargs...)
}

// GetTimeseriesExchangeMetrics mocks base method.
func (m *MockClientInterface) GetTimeseriesExchangeMetrics(ctx context.Context, params *v4.GetTimeseriesExchangeMetricsParams, reqEditors ...v4.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTimeseriesExchangeMetrics", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimeseriesExchangeMetrics indicates an expected call of GetTimeseriesExchangeMetrics.
func (mr *MockClientInterfaceMockRecorder) GetTimeseriesExchangeMetrics(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeseriesExchangeMetrics", reflect.TypeOf((*MockClientInterface)(nil).GetTimeseriesExchangeMetrics), varargs...)
}

// GetTimeseriesIndexConstituents mocks base method.
func (m *MockClientInterface) GetTimeseriesIndexConstituents(ctx context.Context, params *v4.GetTimeseriesIndexConstituentsParams, reqEditors ...v4.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTimeseriesIndexConstituents", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimeseriesIndexConstituents indicates an expected call of GetTimeseriesIndexConstituents.
func (mr *MockClientInterfaceMockRecorder) GetTimeseriesIndexConstituents(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeseriesIndexConstituents", reflect.TypeOf((*MockClientInterface)(nil).GetTimeseriesIndexConstituents), varargs...)
}

// GetTimeseriesIndexLevels mocks base method.
func (m *MockClientInterface) GetTimeseriesIndexLevels(ctx context.Context, params *v4.GetTimeseriesIndexLevelsParams, reqEditors ...v4.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTimeseriesIndexLevels", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimeseriesIndexLevels indicates an expected call of GetTimeseriesIndexLevels.
func (mr *MockClientInterfaceMockRecorder) GetTimeseriesIndexLevels(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeseriesIndexLevels", reflect.TypeOf((*MockClientInterface)(nil).GetTimeseriesIndexLevels), varargs...)
}

// GetTimeseriesInstitutionMetrics mocks base method.
func (m *MockClientInterface) GetTimeseriesInstitutionMetrics(ctx context.Context, params *v4.GetTimeseriesInstitutionMetricsParams, reqEditors ...v4.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTimeseriesInstitutionMetrics", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimeseriesInstitutionMetrics indicates an expected call of GetTimeseriesInstitutionMetrics.
func (mr *MockClientInterfaceMockRecorder) GetTimeseriesInstitutionMetrics(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeseriesInstitutionMetrics", reflect.TypeOf((*MockClientInterface)(nil).GetTimeseriesInstitutionMetrics), varargs...)
}

// GetTimeseriesMarketCandles mocks base method.
func (m *MockClientInterface) GetTimeseriesMarketCandles(ctx context.Context, params *v4.GetTimeseriesMarketCandlesParams, reqEditors ...v4.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTimeseriesMarketCandles", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimeseriesMarketCandles indicates an expected call of GetTimeseriesMarketCandles.
func (mr *MockClientInterfaceMockRecorder) GetTimeseriesMarketCandles(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeseriesMarketCandles", reflect.TypeOf((*MockClientInterface)(nil).GetTimeseriesMarketCandles), varargs...)
}

// GetTimeseriesMarketContractPrices mocks base method.
func (m *MockClientInterface) GetTimeseriesMarketContractPrices(ctx context.Context, params *v4.GetTimeseriesMarketContractPricesParams, reqEditors ...v4.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTimeseriesMarketContractPrices", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimeseriesMarketContractPrices indicates an expected call of GetTimeseriesMarketContractPrices.
func (mr *MockClientInterfaceMockRecorder) GetTimeseriesMarketContractPrices(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeseriesMarketContractPrices", reflect.TypeOf((*MockClientInterface)(nil).GetTimeseriesMarketContractPrices), varargs...)
}

// GetTimeseriesMarketFundingRates mocks base method.
func (m *MockClientInterface) GetTimeseriesMarketFundingRates(ctx context.Context, params *v4.GetTimeseriesMarketFundingRatesParams, reqEditors ...v4.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTimeseriesMarketFundingRates", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimeseriesMarketFundingRates indicates an expected call of GetTimeseriesMarketFundingRates.
func (mr *MockClientInterfaceMockRecorder) GetTimeseriesMarketFundingRates(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeseriesMarketFundingRates", reflect.TypeOf((*MockClientInterface)(nil).GetTimeseriesMarketFundingRates), varargs...)
}

// GetTimeseriesMarketGreeks mocks base method.
func (m *MockClientInterface) GetTimeseriesMarketGreeks(ctx context.Context, params *v4.GetTimeseriesMarketGreeksParams, reqEditors ...v4.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTimeseriesMarketGreeks", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimeseriesMarketGreeks indicates an expected call of GetTimeseriesMarketGreeks.
func (mr *MockClientInterfaceMockRecorder) GetTimeseriesMarketGreeks(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeseriesMarketGreeks", reflect.TypeOf((*MockClientInterface)(nil).GetTimeseriesMarketGreeks), varargs...)
}

// GetTimeseriesMarketImpliedVolatility mocks base method.
func (m *MockClientInterface) GetTimeseriesMarketImpliedVolatility(ctx context.Context, params *v4.GetTimeseriesMarketImpliedVolatilityParams, reqEditors ...v4.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTimeseriesMarketImpliedVolatility", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimeseriesMarketImpliedVolatility indicates an expected call of GetTimeseriesMarketImpliedVolatility.
func (mr *MockClientInterfaceMockRecorder) GetTimeseriesMarketImpliedVolatility(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeseriesMarketImpliedVolatility", reflect.TypeOf((*MockClientInterface)(nil).GetTimeseriesMarketImpliedVolatility), varargs...)
}

// GetTimeseriesMarketLiquidations mocks base method.
func (m *MockClientInterface) GetTimeseriesMarketLiquidations(ctx context.Context, params *v4.GetTimeseriesMarketLiquidationsParams, reqEditors ...v4.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTimeseriesMarketLiquidations", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimeseriesMarketLiquidations indicates an expected call of GetTimeseriesMarketLiquidations.
func (mr *MockClientInterfaceMockRecorder) GetTimeseriesMarketLiquidations(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeseriesMarketLiquidations", reflect.TypeOf((*MockClientInterface)(nil).GetTimeseriesMarketLiquidations), varargs...)
}

// GetTimeseriesMarketMetrics mocks base method.
func (m *MockClientInterface) GetTimeseriesMarketMetrics(ctx context.Context, params *v4.GetTimeseriesMarketMetricsParams, reqEditors ...v4.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTimeseriesMarketMetrics", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimeseriesMarketMetrics indicates an expected call of GetTimeseriesMarketMetrics.
func (mr *MockClientInterfaceMockRecorder) GetTimeseriesMarketMetrics(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeseriesMarketMetrics", reflect.TypeOf((*MockClientInterface)(nil).GetTimeseriesMarketMetrics), varargs...)
}

// GetTimeseriesMarketOpenIntereset mocks base method.
func (m *MockClientInterface) GetTimeseriesMarketOpenIntereset(ctx context.Context, params *v4.GetTimeseriesMarketOpenInteresetParams, reqEditors ...v4.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTimeseriesMarketOpenIntereset", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimeseriesMarketOpenIntereset indicates an expected call of GetTimeseriesMarketOpenIntereset.
func (mr *MockClientInterfaceMockRecorder) GetTimeseriesMarketOpenIntereset(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeseriesMarketOpenIntereset", reflect.TypeOf((*MockClientInterface)(nil).GetTimeseriesMarketOpenIntereset), varargs...)
}

// GetTimeseriesMarketOrderbooks mocks base method.
func (m *MockClientInterface) GetTimeseriesMarketOrderbooks(ctx context.Context, params *v4.GetTimeseriesMarketOrderbooksParams, reqEditors ...v4.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTimeseriesMarketOrderbooks", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimeseriesMarketOrderbooks indicates an expected call of GetTimeseriesMarketOrderbooks.
func (mr *MockClientInterfaceMockRecorder) GetTimeseriesMarketOrderbooks(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeseriesMarketOrderbooks", reflect.TypeOf((*MockClientInterface)(nil).GetTimeseriesMarketOrderbooks), varargs...)
}

// GetTimeseriesMarketQuotes mocks base method.
func (m *MockClientInterface) GetTimeseriesMarketQuotes(ctx context.Context, params *v4.GetTimeseriesMarketQuotesParams, reqEditors ...v4.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTimeseriesMarketQuotes", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimeseriesMarketQuotes indicates an expected call of GetTimeseriesMarketQuotes.
func (mr *MockClientInterfaceMockRecorder) GetTimeseriesMarketQuotes(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeseriesMarketQuotes", reflect.TypeOf((*MockClientInterface)(nil).GetTimeseriesMarketQuotes), varargs...)
}

// GetTimeseriesMarketTrades mocks base method.
func (m *MockClientInterface) GetTimeseriesMarketTrades(ctx context.Context, params *v4.GetTimeseriesMarketTradesParams, reqEditors ...v4.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTimeseriesMarketTrades", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimeseriesMarketTrades indicates an expected call of GetTimeseriesMarketTrades.
func (mr *MockClientInterfaceMockRecorder) GetTimeseriesMarketTrades(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeseriesMarketTrades", reflect.TypeOf((*MockClientInterface)(nil).GetTimeseriesMarketTrades), varargs...)
}

// GetTimeseriesMiningPoolTipsSummary mocks base method.
func (m *MockClientInterface) GetTimeseriesMiningPoolTipsSummary(ctx context.Context, params *v4.GetTimeseriesMiningPoolTipsSummaryParams, reqEditors ...v4.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTimeseriesMiningPoolTipsSummary", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimeseriesMiningPoolTipsSummary indicates an expected call of GetTimeseriesMiningPoolTipsSummary.
func (mr *MockClientInterfaceMockRecorder) GetTimeseriesMiningPoolTipsSummary(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeseriesMiningPoolTipsSummary", reflect.TypeOf((*MockClientInterface)(nil).GetTimeseriesMiningPoolTipsSummary), varargs...)
}

// GetTimeseriesPairMetrics mocks base method.
func (m *MockClientInterface) GetTimeseriesPairMetrics(ctx context.Context, params *v4.GetTimeseriesPairMetricsParams, reqEditors ...v4.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTimeseriesPairMetrics", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimeseriesPairMetrics indicates an expected call of GetTimeseriesPairMetrics.
func (mr *MockClientInterfaceMockRecorder) GetTimeseriesPairMetrics(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeseriesPairMetrics", reflect.TypeOf((*MockClientInterface)(nil).GetTimeseriesPairMetrics), varargs...)
}

// GetTimeseriesStreamAssetMetrics mocks base method.
func (m *MockClientInterface) GetTimeseriesStreamAssetMetrics(ctx context.Context, params *v4.GetTimeseriesStreamAssetMetricsParams, reqEditors ...v4.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTimeseriesStreamAssetMetrics", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimeseriesStreamAssetMetrics indicates an expected call of GetTimeseriesStreamAssetMetrics.
func (mr *MockClientInterfaceMockRecorder) GetTimeseriesStreamAssetMetrics(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeseriesStreamAssetMetrics", reflect.TypeOf((*MockClientInterface)(nil).GetTimeseriesStreamAssetMetrics), varargs...)
}

// GetTimeseriesStreamMarketOrderbooks mocks base method.
func (m *MockClientInterface) GetTimeseriesStreamMarketOrderbooks(ctx context.Context, params *v4.GetTimeseriesStreamMarketOrderbooksParams, reqEditors ...v4.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTimeseriesStreamMarketOrderbooks", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimeseriesStreamMarketOrderbooks indicates an expected call of GetTimeseriesStreamMarketOrderbooks.
func (mr *MockClientInterfaceMockRecorder) GetTimeseriesStreamMarketOrderbooks(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeseriesStreamMarketOrderbooks", reflect.TypeOf((*MockClientInterface)(nil).GetTimeseriesStreamMarketOrderbooks), varargs...)
}

// GetTimeseriesStreamMarketQuotes mocks base method.
func (m *MockClientInterface) GetTimeseriesStreamMarketQuotes(ctx context.Context, params *v4.GetTimeseriesStreamMarketQuotesParams, reqEditors ...v4.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTimeseriesStreamMarketQuotes", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimeseriesStreamMarketQuotes indicates an expected call of GetTimeseriesStreamMarketQuotes.
func (mr *MockClientInterfaceMockRecorder) GetTimeseriesStreamMarketQuotes(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeseriesStreamMarketQuotes", reflect.TypeOf((*MockClientInterface)(nil).GetTimeseriesStreamMarketQuotes), varargs...)
}

// GetTimeseriesStreamMarketTrades mocks base method.
func (m *MockClientInterface) GetTimeseriesStreamMarketTrades(ctx context.Context, params *v4.GetTimeseriesStreamMarketTradesParams, reqEditors ...v4.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTimeseriesStreamMarketTrades", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimeseriesStreamMarketTrades indicates an expected call of GetTimeseriesStreamMarketTrades.
func (mr *MockClientInterfaceMockRecorder) GetTimeseriesStreamMarketTrades(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeseriesStreamMarketTrades", reflect.TypeOf((*MockClientInterface)(nil).GetTimeseriesStreamMarketTrades), varargs...)
}

// GetTransactionTracker mocks base method.
func (m *MockClientInterface) GetTransactionTracker(ctx context.Context, asset v4.BlockchainAsset, params *v4.GetTransactionTrackerParams, reqEditors ...v4.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, asset, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTransactionTracker", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionTracker indicates an expected call of GetTransactionTracker.
func (mr *MockClientInterfaceMockRecorder) GetTransactionTracker(ctx, asset, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, asset, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionTracker", reflect.TypeOf((*MockClientInterface)(nil).GetTransactionTracker), varargs...)
}

// MockClientWithResponsesInterface is a mock of ClientWithResponsesInterface interface.
type MockClientWithResponsesInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientWithResponsesInterfaceMockRecorder
}

// MockClientWithResponsesInterfaceMockRecorder is the mock recorder for MockClientWithResponsesInterface.
type MockClientWithResponsesInterfaceMockRecorder struct {
	mock *MockClientWithResponsesInterface
}

// NewMockClientWithResponsesInterface creates a new mock instance.
func NewMockClientWithResponsesInterface(ctrl *gomock.Controller) *MockClientWithResponsesInterface {
	mock := &MockClientWithResponsesInterface{ctrl: ctrl}
	mock.recorder = &MockClientWithResponsesInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientWithResponsesInterface) EXPECT() *MockClientWithResponsesInterfaceMockRecorder {
	return m.recorder
}

// GetAssetAlertsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetAssetAlertsWithResponse(ctx context.Context, params *v4.GetAssetAlertsParams, reqEditors ...v4.RequestEditorFn) (*v4.GetAssetAlertsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAssetAlertsWithResponse", varargs...)
	ret0, _ := ret[0].(*v4.GetAssetAlertsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssetAlertsWithResponse indicates an expected call of GetAssetAlertsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetAssetAlertsWithResponse(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssetAlertsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetAssetAlertsWithResponse), varargs...)
}

// GetAssetChainsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetAssetChainsWithResponse(ctx context.Context, params *v4.GetAssetChainsParams, reqEditors ...v4.RequestEditorFn) (*v4.GetAssetChainsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAssetChainsWithResponse", varargs...)
	ret0, _ := ret[0].(*v4.GetAssetChainsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssetChainsWithResponse indicates an expected call of GetAssetChainsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetAssetChainsWithResponse(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssetChainsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetAssetChainsWithResponse), varargs...)
}

// GetBlockchainFullBlockWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetBlockchainFullBlockWithResponse(ctx context.Context, asset v4.BlockchainAsset, blockHash v4.BlockchainBlockHash, params *v4.GetBlockchainFullBlockParams, reqEditors ...v4.RequestEditorFn) (*v4.GetBlockchainFullBlockResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, asset, blockHash, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlockchainFullBlockWithResponse", varargs...)
	ret0, _ := ret[0].(*v4.GetBlockchainFullBlockResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockchainFullBlockWithResponse indicates an expected call of GetBlockchainFullBlockWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetBlockchainFullBlockWithResponse(ctx, asset, blockHash, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, asset, blockHash, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockchainFullBlockWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetBlockchainFullBlockWithResponse), varargs...)
}

// GetBlockchainFullTransactionForBlockWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetBlockchainFullTransactionForBlockWithResponse(ctx context.Context, asset v4.BlockchainAsset, blockHash v4.BlockchainBlockHash, transactionHash v4.BlockchainTransactionHash, params *v4.GetBlockchainFullTransactionForBlockParams, reqEditors ...v4.RequestEditorFn) (*v4.GetBlockchainFullTransactionForBlockResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, asset, blockHash, transactionHash, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlockchainFullTransactionForBlockWithResponse", varargs...)
	ret0, _ := ret[0].(*v4.GetBlockchainFullTransactionForBlockResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockchainFullTransactionForBlockWithResponse indicates an expected call of GetBlockchainFullTransactionForBlockWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetBlockchainFullTransactionForBlockWithResponse(ctx, asset, blockHash, transactionHash, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, asset, blockHash, transactionHash, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockchainFullTransactionForBlockWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetBlockchainFullTransactionForBlockWithResponse), varargs...)
}

// GetBlockchainFullTransactionWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetBlockchainFullTransactionWithResponse(ctx context.Context, asset v4.BlockchainAsset, transactionHash v4.BlockchainTransactionHash, params *v4.GetBlockchainFullTransactionParams, reqEditors ...v4.RequestEditorFn) (*v4.GetBlockchainFullTransactionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, asset, transactionHash, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlockchainFullTransactionWithResponse", varargs...)
	ret0, _ := ret[0].(*v4.GetBlockchainFullTransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockchainFullTransactionWithResponse indicates an expected call of GetBlockchainFullTransactionWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetBlockchainFullTransactionWithResponse(ctx, asset, transactionHash, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, asset, transactionHash, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockchainFullTransactionWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetBlockchainFullTransactionWithResponse), varargs...)
}

// GetBlockchainListOfAccountsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetBlockchainListOfAccountsWithResponse(ctx context.Context, asset v4.BlockchainAsset, params *v4.GetBlockchainListOfAccountsParams, reqEditors ...v4.RequestEditorFn) (*v4.GetBlockchainListOfAccountsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, asset, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlockchainListOfAccountsWithResponse", varargs...)
	ret0, _ := ret[0].(*v4.GetBlockchainListOfAccountsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockchainListOfAccountsWithResponse indicates an expected call of GetBlockchainListOfAccountsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetBlockchainListOfAccountsWithResponse(ctx, asset, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, asset, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockchainListOfAccountsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetBlockchainListOfAccountsWithResponse), varargs...)
}

// GetBlockchainListOfBalanceUpdatesWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetBlockchainListOfBalanceUpdatesWithResponse(ctx context.Context, asset v4.BlockchainAsset, params *v4.GetBlockchainListOfBalanceUpdatesParams, reqEditors ...v4.RequestEditorFn) (*v4.GetBlockchainListOfBalanceUpdatesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, asset, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlockchainListOfBalanceUpdatesWithResponse", varargs...)
	ret0, _ := ret[0].(*v4.GetBlockchainListOfBalanceUpdatesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockchainListOfBalanceUpdatesWithResponse indicates an expected call of GetBlockchainListOfBalanceUpdatesWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetBlockchainListOfBalanceUpdatesWithResponse(ctx, asset, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, asset, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockchainListOfBalanceUpdatesWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetBlockchainListOfBalanceUpdatesWithResponse), varargs...)
}

// GetBlockchainListOfBlocksWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetBlockchainListOfBlocksWithResponse(ctx context.Context, asset v4.BlockchainAsset, params *v4.GetBlockchainListOfBlocksParams, reqEditors ...v4.RequestEditorFn) (*v4.GetBlockchainListOfBlocksResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, asset, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlockchainListOfBlocksWithResponse", varargs...)
	ret0, _ := ret[0].(*v4.GetBlockchainListOfBlocksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockchainListOfBlocksWithResponse indicates an expected call of GetBlockchainListOfBlocksWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetBlockchainListOfBlocksWithResponse(ctx, asset, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, asset, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockchainListOfBlocksWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetBlockchainListOfBlocksWithResponse), varargs...)
}

// GetBlockchainListOfTransactionsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetBlockchainListOfTransactionsWithResponse(ctx context.Context, asset v4.BlockchainAsset, params *v4.GetBlockchainListOfTransactionsParams, reqEditors ...v4.RequestEditorFn) (*v4.GetBlockchainListOfTransactionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, asset, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlockchainListOfTransactionsWithResponse", varargs...)
	ret0, _ := ret[0].(*v4.GetBlockchainListOfTransactionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockchainListOfTransactionsWithResponse indicates an expected call of GetBlockchainListOfTransactionsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetBlockchainListOfTransactionsWithResponse(ctx, asset, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, asset, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockchainListOfTransactionsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetBlockchainListOfTransactionsWithResponse), varargs...)
}

// GetBlockchainV2FullBlockWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetBlockchainV2FullBlockWithResponse(ctx context.Context, asset v4.BlockchainAsset, blockHash v4.BlockchainBlockHash, params *v4.GetBlockchainV2FullBlockParams, reqEditors ...v4.RequestEditorFn) (*v4.GetBlockchainV2FullBlockResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, asset, blockHash, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlockchainV2FullBlockWithResponse", varargs...)
	ret0, _ := ret[0].(*v4.GetBlockchainV2FullBlockResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockchainV2FullBlockWithResponse indicates an expected call of GetBlockchainV2FullBlockWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetBlockchainV2FullBlockWithResponse(ctx, asset, blockHash, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, asset, blockHash, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockchainV2FullBlockWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetBlockchainV2FullBlockWithResponse), varargs...)
}

// GetBlockchainV2FullTransactionForBlockWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetBlockchainV2FullTransactionForBlockWithResponse(ctx context.Context, asset v4.BlockchainAsset, blockHash v4.BlockchainBlockHash, txid v4.BlockchainTransactionId, params *v4.GetBlockchainV2FullTransactionForBlockParams, reqEditors ...v4.RequestEditorFn) (*v4.GetBlockchainV2FullTransactionForBlockResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, asset, blockHash, txid, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlockchainV2FullTransactionForBlockWithResponse", varargs...)
	ret0, _ := ret[0].(*v4.GetBlockchainV2FullTransactionForBlockResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockchainV2FullTransactionForBlockWithResponse indicates an expected call of GetBlockchainV2FullTransactionForBlockWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetBlockchainV2FullTransactionForBlockWithResponse(ctx, asset, blockHash, txid, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, asset, blockHash, txid, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockchainV2FullTransactionForBlockWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetBlockchainV2FullTransactionForBlockWithResponse), varargs...)
}

// GetBlockchainV2FullTransactionWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetBlockchainV2FullTransactionWithResponse(ctx context.Context, asset v4.BlockchainAsset, txid v4.BlockchainTransactionId, params *v4.GetBlockchainV2FullTransactionParams, reqEditors ...v4.RequestEditorFn) (*v4.GetBlockchainV2FullTransactionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, asset, txid, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlockchainV2FullTransactionWithResponse", varargs...)
	ret0, _ := ret[0].(*v4.GetBlockchainV2FullTransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockchainV2FullTransactionWithResponse indicates an expected call of GetBlockchainV2FullTransactionWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetBlockchainV2FullTransactionWithResponse(ctx, asset, txid, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, asset, txid, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockchainV2FullTransactionWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetBlockchainV2FullTransactionWithResponse), varargs...)
}

// GetBlockchainV2ListOfAccountsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetBlockchainV2ListOfAccountsWithResponse(ctx context.Context, asset v4.BlockchainAsset, params *v4.GetBlockchainV2ListOfAccountsParams, reqEditors ...v4.RequestEditorFn) (*v4.GetBlockchainV2ListOfAccountsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, asset, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlockchainV2ListOfAccountsWithResponse", varargs...)
	ret0, _ := ret[0].(*v4.GetBlockchainV2ListOfAccountsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockchainV2ListOfAccountsWithResponse indicates an expected call of GetBlockchainV2ListOfAccountsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetBlockchainV2ListOfAccountsWithResponse(ctx, asset, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, asset, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockchainV2ListOfAccountsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetBlockchainV2ListOfAccountsWithResponse), varargs...)
}

// GetBlockchainV2ListOfBalanceUpdatesWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetBlockchainV2ListOfBalanceUpdatesWithResponse(ctx context.Context, asset v4.BlockchainAsset, params *v4.GetBlockchainV2ListOfBalanceUpdatesParams, reqEditors ...v4.RequestEditorFn) (*v4.GetBlockchainV2ListOfBalanceUpdatesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, asset, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlockchainV2ListOfBalanceUpdatesWithResponse", varargs...)
	ret0, _ := ret[0].(*v4.GetBlockchainV2ListOfBalanceUpdatesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockchainV2ListOfBalanceUpdatesWithResponse indicates an expected call of GetBlockchainV2ListOfBalanceUpdatesWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetBlockchainV2ListOfBalanceUpdatesWithResponse(ctx, asset, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, asset, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockchainV2ListOfBalanceUpdatesWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetBlockchainV2ListOfBalanceUpdatesWithResponse), varargs...)
}

// GetBlockchainV2ListOfBlocksWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetBlockchainV2ListOfBlocksWithResponse(ctx context.Context, asset v4.BlockchainAsset, params *v4.GetBlockchainV2ListOfBlocksParams, reqEditors ...v4.RequestEditorFn) (*v4.GetBlockchainV2ListOfBlocksResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, asset, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlockchainV2ListOfBlocksWithResponse", varargs...)
	ret0, _ := ret[0].(*v4.GetBlockchainV2ListOfBlocksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockchainV2ListOfBlocksWithResponse indicates an expected call of GetBlockchainV2ListOfBlocksWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetBlockchainV2ListOfBlocksWithResponse(ctx, asset, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, asset, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockchainV2ListOfBlocksWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetBlockchainV2ListOfBlocksWithResponse), varargs...)
}

// GetBlockchainV2ListOfSubAccountsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetBlockchainV2ListOfSubAccountsWithResponse(ctx context.Context, asset v4.BlockchainAsset, params *v4.GetBlockchainV2ListOfSubAccountsParams, reqEditors ...v4.RequestEditorFn) (*v4.GetBlockchainV2ListOfSubAccountsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, asset, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlockchainV2ListOfSubAccountsWithResponse", varargs...)
	ret0, _ := ret[0].(*v4.GetBlockchainV2ListOfSubAccountsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockchainV2ListOfSubAccountsWithResponse indicates an expected call of GetBlockchainV2ListOfSubAccountsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetBlockchainV2ListOfSubAccountsWithResponse(ctx, asset, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, asset, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockchainV2ListOfSubAccountsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetBlockchainV2ListOfSubAccountsWithResponse), varargs...)
}

// GetBlockchainV2ListOfTransactionsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetBlockchainV2ListOfTransactionsWithResponse(ctx context.Context, asset v4.BlockchainAsset, params *v4.GetBlockchainV2ListOfTransactionsParams, reqEditors ...v4.RequestEditorFn) (*v4.GetBlockchainV2ListOfTransactionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, asset, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlockchainV2ListOfTransactionsWithResponse", varargs...)
	ret0, _ := ret[0].(*v4.GetBlockchainV2ListOfTransactionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockchainV2ListOfTransactionsWithResponse indicates an expected call of GetBlockchainV2ListOfTransactionsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetBlockchainV2ListOfTransactionsWithResponse(ctx, asset, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, asset, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockchainV2ListOfTransactionsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetBlockchainV2ListOfTransactionsWithResponse), varargs...)
}

// GetCatalogAllAssetAlertRulesWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetCatalogAllAssetAlertRulesWithResponse(ctx context.Context, params *v4.GetCatalogAllAssetAlertRulesParams, reqEditors ...v4.RequestEditorFn) (*v4.GetCatalogAllAssetAlertRulesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCatalogAllAssetAlertRulesWithResponse", varargs...)
	ret0, _ := ret[0].(*v4.GetCatalogAllAssetAlertRulesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCatalogAllAssetAlertRulesWithResponse indicates an expected call of GetCatalogAllAssetAlertRulesWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetCatalogAllAssetAlertRulesWithResponse(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCatalogAllAssetAlertRulesWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetCatalogAllAssetAlertRulesWithResponse), varargs...)
}

// GetCatalogAllAssetPairsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetCatalogAllAssetPairsWithResponse(ctx context.Context, params *v4.GetCatalogAllAssetPairsParams, reqEditors ...v4.RequestEditorFn) (*v4.GetCatalogAllAssetPairsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCatalogAllAssetPairsWithResponse", varargs...)
	ret0, _ := ret[0].(*v4.GetCatalogAllAssetPairsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCatalogAllAssetPairsWithResponse indicates an expected call of GetCatalogAllAssetPairsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetCatalogAllAssetPairsWithResponse(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCatalogAllAssetPairsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetCatalogAllAssetPairsWithResponse), varargs...)
}

// GetCatalogAllAssetsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetCatalogAllAssetsWithResponse(ctx context.Context, params *v4.GetCatalogAllAssetsParams, reqEditors ...v4.RequestEditorFn) (*v4.GetCatalogAllAssetsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCatalogAllAssetsWithResponse", varargs...)
	ret0, _ := ret[0].(*v4.GetCatalogAllAssetsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCatalogAllAssetsWithResponse indicates an expected call of GetCatalogAllAssetsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetCatalogAllAssetsWithResponse(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCatalogAllAssetsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetCatalogAllAssetsWithResponse), varargs...)
}

// GetCatalogAllExchangeAssetsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetCatalogAllExchangeAssetsWithResponse(ctx context.Context, params *v4.GetCatalogAllExchangeAssetsParams, reqEditors ...v4.RequestEditorFn) (*v4.GetCatalogAllExchangeAssetsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCatalogAllExchangeAssetsWithResponse", varargs...)
	ret0, _ := ret[0].(*v4.GetCatalogAllExchangeAssetsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCatalogAllExchangeAssetsWithResponse indicates an expected call of GetCatalogAllExchangeAssetsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetCatalogAllExchangeAssetsWithResponse(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCatalogAllExchangeAssetsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetCatalogAllExchangeAssetsWithResponse), varargs...)
}

// GetCatalogAllExchangesWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetCatalogAllExchangesWithResponse(ctx context.Context, params *v4.GetCatalogAllExchangesParams, reqEditors ...v4.RequestEditorFn) (*v4.GetCatalogAllExchangesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCatalogAllExchangesWithResponse", varargs...)
	ret0, _ := ret[0].(*v4.GetCatalogAllExchangesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCatalogAllExchangesWithResponse indicates an expected call of GetCatalogAllExchangesWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetCatalogAllExchangesWithResponse(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCatalogAllExchangesWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetCatalogAllExchangesWithResponse), varargs...)
}

// GetCatalogAllIndexesWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetCatalogAllIndexesWithResponse(ctx context.Context, params *v4.GetCatalogAllIndexesParams, reqEditors ...v4.RequestEditorFn) (*v4.GetCatalogAllIndexesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCatalogAllIndexesWithResponse", varargs...)
	ret0, _ := ret[0].(*v4.GetCatalogAllIndexesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCatalogAllIndexesWithResponse indicates an expected call of GetCatalogAllIndexesWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetCatalogAllIndexesWithResponse(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCatalogAllIndexesWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetCatalogAllIndexesWithResponse), varargs...)
}

// GetCatalogAllInstitutionsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetCatalogAllInstitutionsWithResponse(ctx context.Context, params *v4.GetCatalogAllInstitutionsParams, reqEditors ...v4.RequestEditorFn) (*v4.GetCatalogAllInstitutionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCatalogAllInstitutionsWithResponse", varargs...)
	ret0, _ := ret[0].(*v4.GetCatalogAllInstitutionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCatalogAllInstitutionsWithResponse indicates an expected call of GetCatalogAllInstitutionsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetCatalogAllInstitutionsWithResponse(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCatalogAllInstitutionsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetCatalogAllInstitutionsWithResponse), varargs...)
}

// GetCatalogAllMarketCandlesWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetCatalogAllMarketCandlesWithResponse(ctx context.Context, params *v4.GetCatalogAllMarketCandlesParams, reqEditors ...v4.RequestEditorFn) (*v4.GetCatalogAllMarketCandlesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCatalogAllMarketCandlesWithResponse", varargs...)
	ret0, _ := ret[0].(*v4.GetCatalogAllMarketCandlesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCatalogAllMarketCandlesWithResponse indicates an expected call of GetCatalogAllMarketCandlesWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetCatalogAllMarketCandlesWithResponse(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCatalogAllMarketCandlesWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetCatalogAllMarketCandlesWithResponse), varargs...)
}

// GetCatalogAllMarketMetricsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetCatalogAllMarketMetricsWithResponse(ctx context.Context, params *v4.GetCatalogAllMarketMetricsParams, reqEditors ...v4.RequestEditorFn) (*v4.GetCatalogAllMarketMetricsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCatalogAllMarketMetricsWithResponse", varargs...)
	ret0, _ := ret[0].(*v4.GetCatalogAllMarketMetricsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCatalogAllMarketMetricsWithResponse indicates an expected call of GetCatalogAllMarketMetricsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetCatalogAllMarketMetricsWithResponse(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCatalogAllMarketMetricsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetCatalogAllMarketMetricsWithResponse), varargs...)
}

// GetCatalogAllMarketsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetCatalogAllMarketsWithResponse(ctx context.Context, params *v4.GetCatalogAllMarketsParams, reqEditors ...v4.RequestEditorFn) (*v4.GetCatalogAllMarketsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCatalogAllMarketsWithResponse", varargs...)
	ret0, _ := ret[0].(*v4.GetCatalogAllMarketsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCatalogAllMarketsWithResponse indicates an expected call of GetCatalogAllMarketsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetCatalogAllMarketsWithResponse(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCatalogAllMarketsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetCatalogAllMarketsWithResponse), varargs...)
}

// GetCatalogAllMetricsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetCatalogAllMetricsWithResponse(ctx context.Context, params *v4.GetCatalogAllMetricsParams, reqEditors ...v4.RequestEditorFn) (*v4.GetCatalogAllMetricsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCatalogAllMetricsWithResponse", varargs...)
	ret0, _ := ret[0].(*v4.GetCatalogAllMetricsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCatalogAllMetricsWithResponse indicates an expected call of GetCatalogAllMetricsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetCatalogAllMetricsWithResponse(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCatalogAllMetricsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetCatalogAllMetricsWithResponse), varargs...)
}

// GetCatalogAssetAlertRulesWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetCatalogAssetAlertRulesWithResponse(ctx context.Context, params *v4.GetCatalogAssetAlertRulesParams, reqEditors ...v4.RequestEditorFn) (*v4.GetCatalogAssetAlertRulesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCatalogAssetAlertRulesWithResponse", varargs...)
	ret0, _ := ret[0].(*v4.GetCatalogAssetAlertRulesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCatalogAssetAlertRulesWithResponse indicates an expected call of GetCatalogAssetAlertRulesWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetCatalogAssetAlertRulesWithResponse(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCatalogAssetAlertRulesWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetCatalogAssetAlertRulesWithResponse), varargs...)
}

// GetCatalogAssetPairsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetCatalogAssetPairsWithResponse(ctx context.Context, params *v4.GetCatalogAssetPairsParams, reqEditors ...v4.RequestEditorFn) (*v4.GetCatalogAssetPairsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCatalogAssetPairsWithResponse", varargs...)
	ret0, _ := ret[0].(*v4.GetCatalogAssetPairsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCatalogAssetPairsWithResponse indicates an expected call of GetCatalogAssetPairsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetCatalogAssetPairsWithResponse(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCatalogAssetPairsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetCatalogAssetPairsWithResponse), varargs...)
}

// GetCatalogAssetsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetCatalogAssetsWithResponse(ctx context.Context, params *v4.GetCatalogAssetsParams, reqEditors ...v4.RequestEditorFn) (*v4.GetCatalogAssetsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCatalogAssetsWithResponse", varargs...)
	ret0, _ := ret[0].(*v4.GetCatalogAssetsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCatalogAssetsWithResponse indicates an expected call of GetCatalogAssetsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetCatalogAssetsWithResponse(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCatalogAssetsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetCatalogAssetsWithResponse), varargs...)
}

// GetCatalogExchangeAssetsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetCatalogExchangeAssetsWithResponse(ctx context.Context, params *v4.GetCatalogExchangeAssetsParams, reqEditors ...v4.RequestEditorFn) (*v4.GetCatalogExchangeAssetsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCatalogExchangeAssetsWithResponse", varargs...)
	ret0, _ := ret[0].(*v4.GetCatalogExchangeAssetsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCatalogExchangeAssetsWithResponse indicates an expected call of GetCatalogExchangeAssetsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetCatalogExchangeAssetsWithResponse(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCatalogExchangeAssetsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetCatalogExchangeAssetsWithResponse), varargs...)
}

// GetCatalogExchangesWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetCatalogExchangesWithResponse(ctx context.Context, params *v4.GetCatalogExchangesParams, reqEditors ...v4.RequestEditorFn) (*v4.GetCatalogExchangesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCatalogExchangesWithResponse", varargs...)
	ret0, _ := ret[0].(*v4.GetCatalogExchangesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCatalogExchangesWithResponse indicates an expected call of GetCatalogExchangesWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetCatalogExchangesWithResponse(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCatalogExchangesWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetCatalogExchangesWithResponse), varargs...)
}

// GetCatalogIndexesWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetCatalogIndexesWithResponse(ctx context.Context, params *v4.GetCatalogIndexesParams, reqEditors ...v4.RequestEditorFn) (*v4.GetCatalogIndexesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCatalogIndexesWithResponse", varargs...)
	ret0, _ := ret[0].(*v4.GetCatalogIndexesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCatalogIndexesWithResponse indicates an expected call of GetCatalogIndexesWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetCatalogIndexesWithResponse(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCatalogIndexesWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetCatalogIndexesWithResponse), varargs...)
}

// GetCatalogInstitutionsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetCatalogInstitutionsWithResponse(ctx context.Context, params *v4.GetCatalogInstitutionsParams, reqEditors ...v4.RequestEditorFn) (*v4.GetCatalogInstitutionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCatalogInstitutionsWithResponse", varargs...)
	ret0, _ := ret[0].(*v4.GetCatalogInstitutionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCatalogInstitutionsWithResponse indicates an expected call of GetCatalogInstitutionsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetCatalogInstitutionsWithResponse(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCatalogInstitutionsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetCatalogInstitutionsWithResponse), varargs...)
}

// GetCatalogMarketCandlesWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetCatalogMarketCandlesWithResponse(ctx context.Context, params *v4.GetCatalogMarketCandlesParams, reqEditors ...v4.RequestEditorFn) (*v4.GetCatalogMarketCandlesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCatalogMarketCandlesWithResponse", varargs...)
	ret0, _ := ret[0].(*v4.GetCatalogMarketCandlesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCatalogMarketCandlesWithResponse indicates an expected call of GetCatalogMarketCandlesWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetCatalogMarketCandlesWithResponse(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCatalogMarketCandlesWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetCatalogMarketCandlesWithResponse), varargs...)
}

// GetCatalogMarketMetricsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetCatalogMarketMetricsWithResponse(ctx context.Context, params *v4.GetCatalogMarketMetricsParams, reqEditors ...v4.RequestEditorFn) (*v4.GetCatalogMarketMetricsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCatalogMarketMetricsWithResponse", varargs...)
	ret0, _ := ret[0].(*v4.GetCatalogMarketMetricsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCatalogMarketMetricsWithResponse indicates an expected call of GetCatalogMarketMetricsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetCatalogMarketMetricsWithResponse(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCatalogMarketMetricsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetCatalogMarketMetricsWithResponse), varargs...)
}

// GetCatalogMarketsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetCatalogMarketsWithResponse(ctx context.Context, params *v4.GetCatalogMarketsParams, reqEditors ...v4.RequestEditorFn) (*v4.GetCatalogMarketsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCatalogMarketsWithResponse", varargs...)
	ret0, _ := ret[0].(*v4.GetCatalogMarketsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCatalogMarketsWithResponse indicates an expected call of GetCatalogMarketsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetCatalogMarketsWithResponse(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCatalogMarketsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetCatalogMarketsWithResponse), varargs...)
}

// GetCatalogMetricsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetCatalogMetricsWithResponse(ctx context.Context, params *v4.GetCatalogMetricsParams, reqEditors ...v4.RequestEditorFn) (*v4.GetCatalogMetricsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCatalogMetricsWithResponse", varargs...)
	ret0, _ := ret[0].(*v4.GetCatalogMetricsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCatalogMetricsWithResponse indicates an expected call of GetCatalogMetricsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetCatalogMetricsWithResponse(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCatalogMetricsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetCatalogMetricsWithResponse), varargs...)
}

// GetMempoolFeeratesWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetMempoolFeeratesWithResponse(ctx context.Context, params *v4.GetMempoolFeeratesParams, reqEditors ...v4.RequestEditorFn) (*v4.GetMempoolFeeratesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMempoolFeeratesWithResponse", varargs...)
	ret0, _ := ret[0].(*v4.GetMempoolFeeratesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMempoolFeeratesWithResponse indicates an expected call of GetMempoolFeeratesWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetMempoolFeeratesWithResponse(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMempoolFeeratesWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetMempoolFeeratesWithResponse), varargs...)
}

// GetTimeseriesAssetMetricsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetTimeseriesAssetMetricsWithResponse(ctx context.Context, params *v4.GetTimeseriesAssetMetricsParams, reqEditors ...v4.RequestEditorFn) (*v4.GetTimeseriesAssetMetricsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTimeseriesAssetMetricsWithResponse", varargs...)
	ret0, _ := ret[0].(*v4.GetTimeseriesAssetMetricsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimeseriesAssetMetricsWithResponse indicates an expected call of GetTimeseriesAssetMetricsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetTimeseriesAssetMetricsWithResponse(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeseriesAssetMetricsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetTimeseriesAssetMetricsWithResponse), varargs...)
}

// GetTimeseriesExchangeAssetMetricsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetTimeseriesExchangeAssetMetricsWithResponse(ctx context.Context, params *v4.GetTimeseriesExchangeAssetMetricsParams, reqEditors ...v4.RequestEditorFn) (*v4.GetTimeseriesExchangeAssetMetricsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTimeseriesExchangeAssetMetricsWithResponse", varargs...)
	ret0, _ := ret[0].(*v4.GetTimeseriesExchangeAssetMetricsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimeseriesExchangeAssetMetricsWithResponse indicates an expected call of GetTimeseriesExchangeAssetMetricsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetTimeseriesExchangeAssetMetricsWithResponse(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeseriesExchangeAssetMetricsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetTimeseriesExchangeAssetMetricsWithResponse), varargs...)
}

// GetTimeseriesExchangeMetricsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetTimeseriesExchangeMetricsWithResponse(ctx context.Context, params *v4.GetTimeseriesExchangeMetricsParams, reqEditors ...v4.RequestEditorFn) (*v4.GetTimeseriesExchangeMetricsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTimeseriesExchangeMetricsWithResponse", varargs...)
	ret0, _ := ret[0].(*v4.GetTimeseriesExchangeMetricsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimeseriesExchangeMetricsWithResponse indicates an expected call of GetTimeseriesExchangeMetricsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetTimeseriesExchangeMetricsWithResponse(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeseriesExchangeMetricsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetTimeseriesExchangeMetricsWithResponse), varargs...)
}

// GetTimeseriesIndexConstituentsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetTimeseriesIndexConstituentsWithResponse(ctx context.Context, params *v4.GetTimeseriesIndexConstituentsParams, reqEditors ...v4.RequestEditorFn) (*v4.GetTimeseriesIndexConstituentsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTimeseriesIndexConstituentsWithResponse", varargs...)
	ret0, _ := ret[0].(*v4.GetTimeseriesIndexConstituentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimeseriesIndexConstituentsWithResponse indicates an expected call of GetTimeseriesIndexConstituentsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetTimeseriesIndexConstituentsWithResponse(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeseriesIndexConstituentsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetTimeseriesIndexConstituentsWithResponse), varargs...)
}

// GetTimeseriesIndexLevelsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetTimeseriesIndexLevelsWithResponse(ctx context.Context, params *v4.GetTimeseriesIndexLevelsParams, reqEditors ...v4.RequestEditorFn) (*v4.GetTimeseriesIndexLevelsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTimeseriesIndexLevelsWithResponse", varargs...)
	ret0, _ := ret[0].(*v4.GetTimeseriesIndexLevelsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimeseriesIndexLevelsWithResponse indicates an expected call of GetTimeseriesIndexLevelsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetTimeseriesIndexLevelsWithResponse(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeseriesIndexLevelsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetTimeseriesIndexLevelsWithResponse), varargs...)
}

// GetTimeseriesInstitutionMetricsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetTimeseriesInstitutionMetricsWithResponse(ctx context.Context, params *v4.GetTimeseriesInstitutionMetricsParams, reqEditors ...v4.RequestEditorFn) (*v4.GetTimeseriesInstitutionMetricsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTimeseriesInstitutionMetricsWithResponse", varargs...)
	ret0, _ := ret[0].(*v4.GetTimeseriesInstitutionMetricsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimeseriesInstitutionMetricsWithResponse indicates an expected call of GetTimeseriesInstitutionMetricsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetTimeseriesInstitutionMetricsWithResponse(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeseriesInstitutionMetricsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetTimeseriesInstitutionMetricsWithResponse), varargs...)
}

// GetTimeseriesMarketCandlesWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetTimeseriesMarketCandlesWithResponse(ctx context.Context, params *v4.GetTimeseriesMarketCandlesParams, reqEditors ...v4.RequestEditorFn) (*v4.GetTimeseriesMarketCandlesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTimeseriesMarketCandlesWithResponse", varargs...)
	ret0, _ := ret[0].(*v4.GetTimeseriesMarketCandlesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimeseriesMarketCandlesWithResponse indicates an expected call of GetTimeseriesMarketCandlesWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetTimeseriesMarketCandlesWithResponse(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeseriesMarketCandlesWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetTimeseriesMarketCandlesWithResponse), varargs...)
}

// GetTimeseriesMarketContractPricesWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetTimeseriesMarketContractPricesWithResponse(ctx context.Context, params *v4.GetTimeseriesMarketContractPricesParams, reqEditors ...v4.RequestEditorFn) (*v4.GetTimeseriesMarketContractPricesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTimeseriesMarketContractPricesWithResponse", varargs...)
	ret0, _ := ret[0].(*v4.GetTimeseriesMarketContractPricesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimeseriesMarketContractPricesWithResponse indicates an expected call of GetTimeseriesMarketContractPricesWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetTimeseriesMarketContractPricesWithResponse(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeseriesMarketContractPricesWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetTimeseriesMarketContractPricesWithResponse), varargs...)
}

// GetTimeseriesMarketFundingRatesWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetTimeseriesMarketFundingRatesWithResponse(ctx context.Context, params *v4.GetTimeseriesMarketFundingRatesParams, reqEditors ...v4.RequestEditorFn) (*v4.GetTimeseriesMarketFundingRatesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTimeseriesMarketFundingRatesWithResponse", varargs...)
	ret0, _ := ret[0].(*v4.GetTimeseriesMarketFundingRatesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimeseriesMarketFundingRatesWithResponse indicates an expected call of GetTimeseriesMarketFundingRatesWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetTimeseriesMarketFundingRatesWithResponse(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeseriesMarketFundingRatesWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetTimeseriesMarketFundingRatesWithResponse), varargs...)
}

// GetTimeseriesMarketGreeksWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetTimeseriesMarketGreeksWithResponse(ctx context.Context, params *v4.GetTimeseriesMarketGreeksParams, reqEditors ...v4.RequestEditorFn) (*v4.GetTimeseriesMarketGreeksResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTimeseriesMarketGreeksWithResponse", varargs...)
	ret0, _ := ret[0].(*v4.GetTimeseriesMarketGreeksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimeseriesMarketGreeksWithResponse indicates an expected call of GetTimeseriesMarketGreeksWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetTimeseriesMarketGreeksWithResponse(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeseriesMarketGreeksWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetTimeseriesMarketGreeksWithResponse), varargs...)
}

// GetTimeseriesMarketImpliedVolatilityWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetTimeseriesMarketImpliedVolatilityWithResponse(ctx context.Context, params *v4.GetTimeseriesMarketImpliedVolatilityParams, reqEditors ...v4.RequestEditorFn) (*v4.GetTimeseriesMarketImpliedVolatilityResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTimeseriesMarketImpliedVolatilityWithResponse", varargs...)
	ret0, _ := ret[0].(*v4.GetTimeseriesMarketImpliedVolatilityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimeseriesMarketImpliedVolatilityWithResponse indicates an expected call of GetTimeseriesMarketImpliedVolatilityWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetTimeseriesMarketImpliedVolatilityWithResponse(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeseriesMarketImpliedVolatilityWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetTimeseriesMarketImpliedVolatilityWithResponse), varargs...)
}

// GetTimeseriesMarketLiquidationsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetTimeseriesMarketLiquidationsWithResponse(ctx context.Context, params *v4.GetTimeseriesMarketLiquidationsParams, reqEditors ...v4.RequestEditorFn) (*v4.GetTimeseriesMarketLiquidationsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTimeseriesMarketLiquidationsWithResponse", varargs...)
	ret0, _ := ret[0].(*v4.GetTimeseriesMarketLiquidationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimeseriesMarketLiquidationsWithResponse indicates an expected call of GetTimeseriesMarketLiquidationsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetTimeseriesMarketLiquidationsWithResponse(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeseriesMarketLiquidationsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetTimeseriesMarketLiquidationsWithResponse), varargs...)
}

// GetTimeseriesMarketMetricsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetTimeseriesMarketMetricsWithResponse(ctx context.Context, params *v4.GetTimeseriesMarketMetricsParams, reqEditors ...v4.RequestEditorFn) (*v4.GetTimeseriesMarketMetricsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTimeseriesMarketMetricsWithResponse", varargs...)
	ret0, _ := ret[0].(*v4.GetTimeseriesMarketMetricsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimeseriesMarketMetricsWithResponse indicates an expected call of GetTimeseriesMarketMetricsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetTimeseriesMarketMetricsWithResponse(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeseriesMarketMetricsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetTimeseriesMarketMetricsWithResponse), varargs...)
}

// GetTimeseriesMarketOpenInteresetWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetTimeseriesMarketOpenInteresetWithResponse(ctx context.Context, params *v4.GetTimeseriesMarketOpenInteresetParams, reqEditors ...v4.RequestEditorFn) (*v4.GetTimeseriesMarketOpenInteresetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTimeseriesMarketOpenInteresetWithResponse", varargs...)
	ret0, _ := ret[0].(*v4.GetTimeseriesMarketOpenInteresetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimeseriesMarketOpenInteresetWithResponse indicates an expected call of GetTimeseriesMarketOpenInteresetWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetTimeseriesMarketOpenInteresetWithResponse(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeseriesMarketOpenInteresetWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetTimeseriesMarketOpenInteresetWithResponse), varargs...)
}

// GetTimeseriesMarketOrderbooksWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetTimeseriesMarketOrderbooksWithResponse(ctx context.Context, params *v4.GetTimeseriesMarketOrderbooksParams, reqEditors ...v4.RequestEditorFn) (*v4.GetTimeseriesMarketOrderbooksResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTimeseriesMarketOrderbooksWithResponse", varargs...)
	ret0, _ := ret[0].(*v4.GetTimeseriesMarketOrderbooksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimeseriesMarketOrderbooksWithResponse indicates an expected call of GetTimeseriesMarketOrderbooksWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetTimeseriesMarketOrderbooksWithResponse(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeseriesMarketOrderbooksWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetTimeseriesMarketOrderbooksWithResponse), varargs...)
}

// GetTimeseriesMarketQuotesWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetTimeseriesMarketQuotesWithResponse(ctx context.Context, params *v4.GetTimeseriesMarketQuotesParams, reqEditors ...v4.RequestEditorFn) (*v4.GetTimeseriesMarketQuotesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTimeseriesMarketQuotesWithResponse", varargs...)
	ret0, _ := ret[0].(*v4.GetTimeseriesMarketQuotesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimeseriesMarketQuotesWithResponse indicates an expected call of GetTimeseriesMarketQuotesWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetTimeseriesMarketQuotesWithResponse(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeseriesMarketQuotesWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetTimeseriesMarketQuotesWithResponse), varargs...)
}

// GetTimeseriesMarketTradesWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetTimeseriesMarketTradesWithResponse(ctx context.Context, params *v4.GetTimeseriesMarketTradesParams, reqEditors ...v4.RequestEditorFn) (*v4.GetTimeseriesMarketTradesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTimeseriesMarketTradesWithResponse", varargs...)
	ret0, _ := ret[0].(*v4.GetTimeseriesMarketTradesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimeseriesMarketTradesWithResponse indicates an expected call of GetTimeseriesMarketTradesWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetTimeseriesMarketTradesWithResponse(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeseriesMarketTradesWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetTimeseriesMarketTradesWithResponse), varargs...)
}

// GetTimeseriesMiningPoolTipsSummaryWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetTimeseriesMiningPoolTipsSummaryWithResponse(ctx context.Context, params *v4.GetTimeseriesMiningPoolTipsSummaryParams, reqEditors ...v4.RequestEditorFn) (*v4.GetTimeseriesMiningPoolTipsSummaryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTimeseriesMiningPoolTipsSummaryWithResponse", varargs...)
	ret0, _ := ret[0].(*v4.GetTimeseriesMiningPoolTipsSummaryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimeseriesMiningPoolTipsSummaryWithResponse indicates an expected call of GetTimeseriesMiningPoolTipsSummaryWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetTimeseriesMiningPoolTipsSummaryWithResponse(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeseriesMiningPoolTipsSummaryWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetTimeseriesMiningPoolTipsSummaryWithResponse), varargs...)
}

// GetTimeseriesPairMetricsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetTimeseriesPairMetricsWithResponse(ctx context.Context, params *v4.GetTimeseriesPairMetricsParams, reqEditors ...v4.RequestEditorFn) (*v4.GetTimeseriesPairMetricsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTimeseriesPairMetricsWithResponse", varargs...)
	ret0, _ := ret[0].(*v4.GetTimeseriesPairMetricsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimeseriesPairMetricsWithResponse indicates an expected call of GetTimeseriesPairMetricsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetTimeseriesPairMetricsWithResponse(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeseriesPairMetricsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetTimeseriesPairMetricsWithResponse), varargs...)
}

// GetTimeseriesStreamAssetMetricsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetTimeseriesStreamAssetMetricsWithResponse(ctx context.Context, params *v4.GetTimeseriesStreamAssetMetricsParams, reqEditors ...v4.RequestEditorFn) (*v4.GetTimeseriesStreamAssetMetricsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTimeseriesStreamAssetMetricsWithResponse", varargs...)
	ret0, _ := ret[0].(*v4.GetTimeseriesStreamAssetMetricsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimeseriesStreamAssetMetricsWithResponse indicates an expected call of GetTimeseriesStreamAssetMetricsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetTimeseriesStreamAssetMetricsWithResponse(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeseriesStreamAssetMetricsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetTimeseriesStreamAssetMetricsWithResponse), varargs...)
}

// GetTimeseriesStreamMarketOrderbooksWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetTimeseriesStreamMarketOrderbooksWithResponse(ctx context.Context, params *v4.GetTimeseriesStreamMarketOrderbooksParams, reqEditors ...v4.RequestEditorFn) (*v4.GetTimeseriesStreamMarketOrderbooksResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTimeseriesStreamMarketOrderbooksWithResponse", varargs...)
	ret0, _ := ret[0].(*v4.GetTimeseriesStreamMarketOrderbooksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimeseriesStreamMarketOrderbooksWithResponse indicates an expected call of GetTimeseriesStreamMarketOrderbooksWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetTimeseriesStreamMarketOrderbooksWithResponse(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeseriesStreamMarketOrderbooksWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetTimeseriesStreamMarketOrderbooksWithResponse), varargs...)
}

// GetTimeseriesStreamMarketQuotesWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetTimeseriesStreamMarketQuotesWithResponse(ctx context.Context, params *v4.GetTimeseriesStreamMarketQuotesParams, reqEditors ...v4.RequestEditorFn) (*v4.GetTimeseriesStreamMarketQuotesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTimeseriesStreamMarketQuotesWithResponse", varargs...)
	ret0, _ := ret[0].(*v4.GetTimeseriesStreamMarketQuotesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimeseriesStreamMarketQuotesWithResponse indicates an expected call of GetTimeseriesStreamMarketQuotesWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetTimeseriesStreamMarketQuotesWithResponse(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeseriesStreamMarketQuotesWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetTimeseriesStreamMarketQuotesWithResponse), varargs...)
}

// GetTimeseriesStreamMarketTradesWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetTimeseriesStreamMarketTradesWithResponse(ctx context.Context, params *v4.GetTimeseriesStreamMarketTradesParams, reqEditors ...v4.RequestEditorFn) (*v4.GetTimeseriesStreamMarketTradesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTimeseriesStreamMarketTradesWithResponse", varargs...)
	ret0, _ := ret[0].(*v4.GetTimeseriesStreamMarketTradesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimeseriesStreamMarketTradesWithResponse indicates an expected call of GetTimeseriesStreamMarketTradesWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetTimeseriesStreamMarketTradesWithResponse(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeseriesStreamMarketTradesWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetTimeseriesStreamMarketTradesWithResponse), varargs...)
}

// GetTransactionTrackerWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetTransactionTrackerWithResponse(ctx context.Context, asset v4.BlockchainAsset, params *v4.GetTransactionTrackerParams, reqEditors ...v4.RequestEditorFn) (*v4.GetTransactionTrackerResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, asset, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTransactionTrackerWithResponse", varargs...)
	ret0, _ := ret[0].(*v4.GetTransactionTrackerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionTrackerWithResponse indicates an expected call of GetTransactionTrackerWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetTransactionTrackerWithResponse(ctx, asset, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, asset, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionTrackerWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetTransactionTrackerWithResponse), varargs...)
}
